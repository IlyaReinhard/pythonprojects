def reverse_params(func):

  def wrapper(*args):
    new_args = args[::-1]
    return func(*new_args)

  return wrapper  
  # EXAMPLES
@reverse_params
def f(a,b,c):
  multiply = (a*b) / c
  return multiply
  
  
  
  
  class OlegException(Exception):
  def __init__(self, name = 'OlegErorr'):
    self.name = name
  def __str__(self):
    return self.name


def without_Oleg_decorator(func):
  def wrapper(*args):
    new_list_args = [str(i) for i in args] # здесь подобный синтакси так как я хотел преобразовать параметры из декорируемоой функции
    line = ''.join(new_list_args).lower()  # в форму строки для того, чтобы все привести к нижнему регистру, так аргументы могут передеваться в неккоретктойн форме
    try:                                   # например так: "oLeGNecHeloVek"
      if 'oleg' in line:
        raise OlegException
    except:
      print('Oleg Exception!!!')
      print('Уберите Олега из аргументов!')
      return func(*args)
  return wrapper
#example
@without_Oleg_decorator
def fffff(*args):
  return f" {args} !!! "
  
  
# декоратор с параметрами и без
def repeat(_func=None, *, n=1):
    def _repeat(f):
        def inner(*args, **kwargs):
            return f(*args, **kwargs) * n
        return inner
    if _func is None:
        # вызов с параметрами как раньше
        return _repeat
    else:
        # вызов без параметра 
        return _repeat(_func)

#examples

@repeat(n=3)
def fffff(value):
  return str(value) + '!!!'

@repeat()
def fffff(value):
  return str(value) + '!!!'

@repeat
def fffff(value):
  return str(value) + '!!!'


  
  
  

